name: build

env:
  REGISTRY: "registry.digitalocean.com/parabola/"
  IMAGE_NAME: "psychopompcomics.com"
  IMAGE_NAME_SERVER: "psychopompcomics.com_nginx"

on:
  push:
    branches: 
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: yarn install
        run: |
          yarn

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Log in to Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Docker Compose build the production app (IMAGE_NAME) and server-certbot (IMAGE_NAME_SERVER)
        run: |
          export APP_ENV=prod IMAGE_NAME=$(echo $IMAGE_NAME) IMAGE_NAME_SERVER=$(echo $IMAGE_NAME_SERVER) REGISTRY=$(echo $REGISTRY) COMMIT=$(echo $GITHUB_SHA | head -c7) && \
          docker-compose -f docker-compose.prod.yml build
      
      - name: Push IMAGE_NAME:hash to registry
        run: docker push $(echo $REGISTRY)$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

      - name: Push IMAGE_NAME_SERVER:hash to registry
        run: docker push $(echo $REGISTRY)$(echo $IMAGE_NAME_SERVER):$(echo $GITHUB_SHA | head -c7)

      - name: Tag the build as latest for IMAGE_NAME
        run: docker tag $(echo $REGISTRY)$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) $(echo $REGISTRY)$(echo $IMAGE_NAME):latest

      - name: Tag the build as latest for IMAGE_NAME_SERVER
        run: docker tag $(echo $REGISTRY)$(echo $IMAGE_NAME_SERVER):$(echo $GITHUB_SHA | head -c7) $(echo $REGISTRY)$(echo $IMAGE_NAME_SERVER):latest

      - name: Push IMAGE_NAME:latest to registry
        run: docker push $(echo $REGISTRY)$(echo $IMAGE_NAME):latest

      - name: Push IMAGE_NAME_SERVER:latest to registry
        run: docker push $(echo $REGISTRY)$(echo $IMAGE_NAME_SERVER):latest

      - name: Copy the compose file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.prod.yml"
          target: "~/psychopompcomics"

      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@master
        with:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          KEY: ${{ secrets.SSH_KEY }}
          envs: REGISTRY,IMAGE_NAME,IMAGE_NAME_SERVER,GITHUB_SHA
          script: |
            # export our env variables
            export APP_ENV=prod IMAGE_NAME=$(echo $IMAGE_NAME) IMAGE_NAME_SERVER=$(echo $IMAGE_NAME_SERVER) REGISTRY=$(echo $REGISTRY) COMMIT=$(echo $GITHUB_SHA | head -c7)

            # Change to our workdir
            cd psychopompcomics

            # Stops containers and removes containers, networks, volumes, and images created by up
            docker-compose -f docker-compose.prod.yml down -v --remove-orphans

            # Lets login to Digtal Ocean Container Registry in order for Docker to run from the registry url
            doctl registry login --expiry-seconds 600
            
            #Lets pull our images down
            docker-compose -f docker-compose.prod.yml pull

            # Starts the new containers from the new images
            docker-compose -f docker-compose.prod.yml up -d